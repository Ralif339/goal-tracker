import config
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import F
import sqlite3  
from pytz import timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.filters import ChatMemberUpdatedFilter, KICKED
from aiogram.types import ChatMemberUpdated


bot = Bot(config.token)
dp = Dispatcher()

con = sqlite3.connect("database.db")
cur = con.cursor()
cur.execute("PRAGMA foreign_keys = ON;")

reminder_scheduler = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))
reminder_scheduler_started = False

complete_task_button = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='complete_task')
task_keyboard = InlineKeyboardMarkup(inline_keyboard=[[complete_task_button]])


async def send_remind():
    sql_request = f"""
                SELECT name, status, deadline, user_id
                FROM Goals
                """
    for row in cur.execute(sql_request):
        goal_name, status, deadline, user_id = row
        deadline_date = datetime.strptime(deadline, "%Y-%m-%d").date()
        today = datetime.today().date()

        if (deadline_date - today).days == 1 and status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ":
            await bot.send_message(user_id, f'üîî–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ "{goal_name}" –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å!')


async def send_motivation():
    sql_request = f"""
                SELECT name, status, user_id, creation_date
                FROM Goals
                """
    for row in cur.execute(sql_request):
        goal_name, status, user_id, creation_date = row
        creation_date = datetime.strptime(creation_date, "%Y-%m-%d").date()
        today = datetime.today().date()

        if (today - creation_date).days == 3 and status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ":
            await bot.send_message(user_id, f'üóø–î–∞ —É–∂... –ß–µ–º –≤—ã —Ç–∞–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å!? –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ü–µ–ª—å: {goal_name}')


async def start_reminder_scheduler(user_id):
    global reminder_scheduler_started
    if not reminder_scheduler_started:
        reminder_scheduler.add_job(send_remind, CronTrigger(hour=10)) 
        reminder_scheduler.add_job(send_motivation, CronTrigger(hour=10)) 
        await bot.send_message(user_id, "üîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –≤–∫–ª—é—á–µ–Ω–æ!") 
        reminder_scheduler.start()
        reminder_scheduler_started = True
    

@dp.message(Command('start'))
async def process_start(message: Message):
    await message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ü–µ–ª–∏.\n" +
                         "–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help")


@dp.message(Command('help'))
async def process_help(message: Message):
    await message.answer('üéØ–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å: /add_goal [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞:–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ]\n'+
                         'üìù–†–∞–∑–±–∏—Ç—å —Ü–µ–ª—å –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏: /add_task [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞:–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ] [goal_id]\n'+
                         'üìà–ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π –∏ –µ—ë –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: /list_goals\n'+
                         'üìã–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏: /view_goal [goal_id]\n'+
                         '‚úÖ–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: /done_task [task_id]\n'+
                         '‚úÖ–û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: /done_goal [goal_id]\n'+
                         'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats')
    
    
def find_name_arg(args: str) -> str:
    quotes_index = []
    name_arg = ""
    for index in range(len(args)):
        if args[index] == '"':
            quotes_index.append(index)

    if quotes_index:
        name_arg = args[quotes_index[0]+1:quotes_index[1]]
    else:
        return ""
        
    return name_arg
    
    
@dp.message(Command('add_goal'))
async def process_add_goal(message: Message, command: CommandObject):
    try:
        args = command.args
        name_arg = find_name_arg(args)
        date_arg = datetime.strptime(args.split('" ')[1], "%Y-%m-%d").date()
        deadline_arg = args.split('" ')[1]
        today = datetime.today().strftime("%Y-%m-%d")
        sql_request = f"""
            INSERT INTO Goals(Name, Deadline, Status, User_id, Creation_date) 
            VALUES ('{name_arg}', '{deadline_arg}', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', {message.from_user.id}, '{today}')
            """
        cur.execute(sql_request)
        con.commit()
        await message.reply("‚úÖ–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_task.")
        await start_reminder_scheduler(message.from_user.id)
    except Exception as ex:
        print(ex)
        await message.answer("‚ö†Ô∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n" +
                             '/add_goal "[–Ω–∞–∑–≤–∞–Ω–∏–µ]" [–¥–∞—Ç–∞:–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ]\n' +
                             'üìÑ–ü—Ä–∏–º–µ—Ä: /add_goal "–ò–∑—É—á–∏—Ç—å JavaScript" 2025-02-28')
    
    
@dp.message(Command('list_goals'))
async def process_list_goals(message: Message):
    sql_request = f"""
        SELECT name, status, id
        FROM Goals
    """
    result = ""
    i = 1
    for row in cur.execute(sql_request):
        result += f"{i}) –¶–µ–ª—å: {row[0]}. –°—Ç–∞—Ç—É—Å: {row[1]}. goal_id: {row[2]}.\n"
        i += 1
    if result:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å', callback_data="complete_goal")]])
        await message.answer("üéØ–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:\n" + result, reply_markup=keyboard)
    else:
        await message.answer("‚ùó–¶–µ–ª–µ–π –µ—â–µ –Ω–µ—Ç.\n" +
                             "‚ö†Ô∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n" +
                             '/add_goal "[–Ω–∞–∑–≤–∞–Ω–∏–µ]" [–¥–∞—Ç–∞:–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ]\n' +
                             'üìÑ–ü—Ä–∏–º–µ—Ä: /add_goal "–ò–∑—É—á–∏—Ç—å JavaScript" 2025-02-28')

    
@dp.callback_query(F.data=="complete_goal")
async def process_complete_goal(callback):
    message_text = callback.message.text
    text_rows = message_text.split('\n')[1:]
    buttons = []
    for row in text_rows:
        goal_id = row.split()[-1].strip('.')
        goal_name = row.split(':')[1].split('.')[0].strip()
        buttons.append([InlineKeyboardButton(text=f"{goal_id}: {goal_name}", callback_data=f"complete_goal_{goal_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    
    
@dp.callback_query(F.data.startswith("complete_goal_"))
async def process_complete_goal_button_press(callback):
    goal_id = callback.data.split('_')[2]
    sql_request = f"""
        UPDATE Goals
        SET status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        WHERE id = {goal_id}
    """
    cur.execute(sql_request)
    con.commit()
    await callback.message.edit_text(
        text="–¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π!"
    )
    

@dp.message(Command('add_task'))
async def process_add_task(message: Message, command: CommandObject):
    try:
        args = command.args
        name_arg = find_name_arg(args)
        goal_id = args.split()[-1]
        deadline_arg = args.split('" ')[1].split()[0]
        date_arg = datetime.strptime(deadline_arg, "%Y-%m-%d").date()
        sql_request = f"""
            INSERT INTO Tasks(Name, Deadline, Goal_id, Status) 
            VALUES ('{name_arg}', '{deadline_arg}', {goal_id}, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
            """
        cur.execute(sql_request)
        con.commit()
        await message.reply("‚úÖ–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as ex:
        print(ex)
        await message.answer("‚ö†Ô∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n" +
                             '/add_task "[–Ω–∞–∑–≤–∞–Ω–∏–µ]" [–¥–∞—Ç–∞:–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ] [goal_id]\n' +
                             '–ü—Ä–∏–º–µ—Ä: /add_task "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ JavaScript" 2025-01-25 1\n' +
                             "‚ùó–£–∑–Ω–∞—Ç—å goal_id –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /list_goals")


@dp.message(Command('view_goal'))
async def process_view_goal(message: Message, command: CommandObject):
    goal_id = command.args
    user_id = message.from_user.id
    try:
        sql_request = f"""
                SELECT g.name, t.name, t.deadline, t.status, t.id, g.user_id
                FROM Tasks t INNER JOIN Goals g on g.id = t.goal_id
                WHERE g.id = {goal_id} and g.user_id = {user_id}
                """
        table = cur.execute(sql_request)
        result = ""
        goal_name = ""
        for row in table:
            goal_name = row[0]
            result += f"–ó–∞–¥–∞—á–∞: {row[1]}, —Å—Ä–æ–∫: {row[2]}, —Å—Ç–∞—Ç—É—Å: {row[3]}, task_id: {row[4]}.\n"
        if result:
            await message.answer(f"üìã–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ü–µ–ª–∏ {goal_name}:\n" + result, reply_markup=task_keyboard)
        else:
            await message.answer("‚ö†Ô∏è–¶–µ–ª—å –∏ (–∏–ª–∏) –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except Exception as ex:
        print(ex)
        await message.reply("‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ goal_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." +
                            " –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /list_goals")


@dp.message(Command('done_goal'))
async def process_done_goal(message: Message, command: CommandObject):
    try:
        goal_id = command.args
        sql_request = f"""
                UPDATE Goals
                SET Status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
                WHERE Goals.id = {goal_id}
                """
        cur.execute(sql_request)
        con.commit()
        sql_request = f"""
                SELECT name
                FROM Goals
                WHERE Goals.id = {goal_id}
                """
        goal_name = cur.execute(sql_request).fetchone()[0]
        
        await message.reply(f'üéâ–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ü–µ–ª—å "{goal_name}".\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
    except Exception as ex:
        print(ex)
        await message.answer("‚ö†Ô∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n" +
                             "/done_goal [goal_id]\n" +
                             'üìÑ–ü—Ä–∏–º–µ—Ä: /done_goal 1' +
                             "‚ùó–£–∑–Ω–∞—Ç—å goal_id –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /list_goals")


@dp.message(Command('done_task'))
async def process_done_task(message: Message, command: CommandObject):
    try:
        task_id = command.args
        sql_request = f"""
                UPDATE Tasks
                SET Status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
                WHERE Tasks.id = {task_id}
                """
        cur.execute(sql_request)
        con.commit()
        sql_request = f"""
                SELECT name
                FROM Tasks
                WHERE Tasks.id = {task_id}
                """
        task_name = cur.execute(sql_request).fetchone()[0]
        
        await message.reply(f'üéâ–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É "{task_name}".\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
    except Exception as ex:
        print(ex)
        await message.answer("‚ö†Ô∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n" +
                             "/done_task [task_id]\n" +
                             'üìÑ–ü—Ä–∏–º–µ—Ä: /done_task 1\n' +
                             "‚ùó–£–∑–Ω–∞—Ç—å task_id –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /view_goal [goal_id]")


@dp.message(Command('stats'))
async def process_user_stats(message: Message):
    sql_request = f"""
        SELECT COUNT(*)
        FROM Goals
        WHERE status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
    """
    goals_done = cur.execute(sql_request).fetchone()[0]
    sql_request = f"""
        SELECT COUNT(*)
        FROM Tasks
        WHERE status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
    """
    tasks_done = cur.execute(sql_request).fetchone()[0]
    sql_request = f"""
        SELECT COUNT(*)
        FROM Goals
    """
    goals_count = cur.execute(sql_request).fetchone()[0]
    sql_request = f"""
        SELECT COUNT(*)
        FROM Tasks
    """
    tasks_count = cur.execute(sql_request).fetchone()[0]
    if goals_count and tasks_count:
        await message.answer(f"–¶–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {goals_done}({goals_done/goals_count*100}%).\n–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {tasks_done}({tasks_done/tasks_count*100}%)")
    elif goals_count:
        await message.answer(f"–¶–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {goals_done}({goals_done/goals_count*100}%).\n–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {tasks_done}(0%)")
    else:
        await message.answer("‚ö†Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏!")

@dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    try:
        sql_request = f"""
            SELECT id, user_id
            FROM Goals
            WHERE user_id = {event.from_user.id}
        """
        for row in cur.execute(sql_request):
            goal_id = row[0]
            delete_request = f"""
                DELETE FROM Tasks 
                WHERE goal_id = {goal_id}
            """
            cur.execute(delete_request)
            con.commit()
        for row in cur.execute(sql_request):
            goal_id = row[0]
            delete_request = f"""
                DELETE FROM Goals 
                WHERE id = {goal_id}
            """
            con.commit()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
    except Exception as ex:
        print(ex)


@dp.callback_query(F.data=="complete_task")
async def process_button_press(callback):
    message_text = callback.message.text
    text_rows = message_text.split('\n')[1:]
    buttons = []
    for row in text_rows:
        task_id = row.split()[-1].strip('.')
        task_name = row.split(':')[1].split(',')[0].strip()
        buttons.append([InlineKeyboardButton(text=f"{task_id}: {task_name}", callback_data=f"complete_task_{task_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    

@dp.callback_query(F.data.startswith("complete_task_"))
async def process_complete_task_button_press(callback):
    task_id = callback.data.split('_')[2]
    sql_request = f"""
        UPDATE Tasks
        SET status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        WHERE id = {task_id}
    """
    cur.execute(sql_request)
    con.commit()
    await callback.message.edit_text(
        text="–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π!"
    )


@dp.message()
async def process_unknown_command(message: Message):
    await message.reply("‚ö†Ô∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n" + 
                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help")


async def main():
    global reminder_scheduler_started
    reminder_scheduler_started = False
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())